#define MAIN
#include "arduino/arduino.ceu"
#include "mic.ceu"
#include "rf.ceu"       // 1-15 ms latency

/*
 * TODO:
 *  - re-testar
 *  - colocar millis de atraso no pacote de resposta
 *  - fazer o esquema de responder ao microfone mesmo sem receber ACK (perda de pacotes, 2 toques)
 *      - 2 toques na bola vai dar merda
 *  - ;
 */

#define ID 99

_Serial.begin(9600);
_randomSeed(_analogRead(A3));

var u32 tt = 0;                                     // total game time

var int dist = _;                                   // set immediately in "sonar.ceu"
spawn (dist) do
    #include "sonar.ceu"
end

var u16 seq;
loop seq in [1 -> _[ do
    _Serial.print(">>> SEQUENCIA ");
    _Serial.println(seq);

    var int late = 0;
    var bool next_is_him = do
        par do
            //var Side side = await Mic();
            await Mic();                            // my hit
            _Serial.println("my hit");
            escape true;
        with
            late = await Rx(1);                     // his hit
            _Serial.println("his hit");
            escape false;
        end
    end;

    var u32 t0 = _millis();                         // start time of this sequence: set immediately every touch
    var u32 ts = _;                                 // total time until the last touch in this sequence

    do finalize with
        _Serial.print("<<< SEQUENCIA ");
        _Serial.print(ts);
        _Serial.println("ms");
        tt = tt + ts;
    end

    spawn () do
        #include "playing.ceu"
    end

    var u32 old = _micros();
    var u16 touch;
    loop touch in [1 -> _[ do
        ts = _millis() - t0;

        var u32 us = _micros() - old;
        var int km_h = dist*36000/(us as int);
        var int m_s = do
            if touch > 1 then
                _ceu_dbg_assert(us > 0);
                escape dist/(us as int)*1000;
            else
                escape 0;
            end
        end;

        //_Serial.print("seq: ");   _Serial.print(seq);   _Serial.print(" | ");
        _Serial.print("touch: "); _Serial.print(touch); _Serial.print(" | ");
        _Serial.print("vel: ");   _Serial.print(m_s);   _Serial.print("m/s | ");
        _Serial.print("dist: ");  _Serial.print(dist);  _Serial.print("cm | ");
        _Serial.print("time: ");  _Serial.print(ts);    _Serial.println("ms");

        par/or do
            if next_is_him then
                _Serial.println("await him");
                spawn Tx(touch);
                late = await Rx(touch+1);           // his hit
                _Serial.print("his hit, late: ");
                _Serial.println(late);
            else
                //var Side side = await Mic();
                _Serial.println("await myself");
                var u32 v1 = _millis();
                await Mic();                        // my hit
                var u32 v2 = _millis() - v1;
                _Serial.print("my hit ");
                _Serial.println(v2);
                _ceu_dbg_assert(v2 > 200);
            end

            next_is_him = (not next_is_him);
        with
            await 5s;                               // 5 seconds w/ response
            break;
        with
            if tt+ts <= 1000*15 then
                await (1000*15-(tt+ts))ms;          // time left
            end
            break/seq;                              // 15s of gameplay
        end
    end

    _Serial.println("QUEDA");
end

_Serial.print("FIM DE JOGO: ");
_Serial.print(seq);
_Serial.println(" sequencias");

await FOREVER;
