#define MAIN
#include "arduino/arduino.ceu"

//#define DISPLAY

var int dist = _;
spawn (dist) do
    #include "sonar.ceu"
end

#define ID          99

#define SOUND_PIN   A0
#define SOUND_LIMIT 400

#define TX_PIN      7
#define RX_PIN      8

#define DIST_PIN    0
#define DIST_PIN_ID PIN_01

#if 1
_pinMode(SOUND_PIN, INPUT);
code/await Touch (void) -> void do
    await async do
        loop do
            var int v = _analogRead(SOUND_PIN);
            if v > SOUND_LIMIT then
                _Serial.print(v);
                _Serial.print("db\n");
                break;
            end
        end
    end
end
#else
input int PIN_02;
code/await Touch (void) -> void do
    var int v = await PIN_02 until v==1;
    await 200ms;
end
#endif

native/pre do
    ##include <VirtualWire.h>
end
{
    vw_set_tx_pin(TX_PIN);
    vw_set_ptt_inverted(true);
    vw_set_rx_pin(RX_PIN);
    vw_setup(2000);     // bps
    vw_rx_start();      // Inicializa o receptor
}

code/tight Ping_Blocks (void) -> void do
    {{
        u8 id = ID;
        vw_send(&id, 1);
        Serial.print("tx'ing...\n");
        vw_wait_tx();
        Serial.print("tx'ed...\n");
    }}
end

code/await Pong (void) -> void do
    await async do
        var u8 id  = _;
        var u8 len = _;
        _Serial.print("rx'ing...\n");
        loop do
            if {vw_get_message(@(&&id), @(&&len))} as bool then
                _ceu_dbg_assert(len == 1);
                _Serial.print(id);
                _Serial.print("id\n");
                if id == ID then
                    break;
                end
            end
        end
        _Serial.print("rx'ed...\n");
    end
end

input int DIST_PIN_ID;
code/await Dist (void) -> int do
    _pinMode(DIST_PIN, OUTPUT);
    _digitalWrite(DIST_PIN, LOW);
    await 2us;
    _digitalWrite(DIST_PIN, HIGH);
    var u32 old = _micros();
    await 5us;
    _digitalWrite(DIST_PIN, LOW);

    _pinMode(DIST_PIN, INPUT);
    await DIST_PIN_ID;
    var u32 us = _micros() - old;
    var int cm = (us as int)/29/2;
    escape cm;
end

_Serial.begin(9600);

output int PIN_13;
emit PIN_13(1);

var int seq;
loop seq in [1 -> _[ do
    loop do
        //var Side side = await Touch();
        await Touch();
        emit PIN_13(0);
        do finalize with
            emit PIN_13(1);
        end
        var int cm = _;
        var int us = _;

#if 0
        await 2s;
#else
        watching 2s do
            par/and do
                var u32 old = _micros();
                await Pong();
                us = _micros() - old;
            with
                cm = await Dist();
// TODO: o que fazer se distancia curta???
            with
await 1s;
                call Ping_Blocks();         // call last because of blocking call
            end
            var int km_h = cm*36000/us;
            var int m_s  = cm/us*1000;
#ifdef DISPLAY
            call Display(seq.." "..cm/10.." "..m_s);
#else
            _Serial.print("seq ");
            _Serial.print(seq);
            _Serial.print(" | ");
            _Serial.print(m_s);
            _Serial.print("ms | ");
            _Serial.print(cm);
            _Serial.print("cm\n");
#endif
            continue;
        end
#endif

#ifdef DISPLAY
        call Display("QUEDA");
#else
        _Serial.print("QUEDA\n");
#endif
        break;
    end
end
