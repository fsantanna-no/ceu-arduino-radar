#define MAIN
#include "arduino/arduino.ceu"
#include "mic.ceu"
#include "rf.ceu"

var int dist = _;           // set immediately in "sonar.ceu"
spawn (dist) do
    #include "sonar.ceu"
end

#define ID          99

#define SOUND_PIN   A0
#define SOUND_LIMIT 400

#define TX_PIN      7
#define RX_PIN      8

native/pre do
    ##include <VirtualWire.h>
end
{
    vw_set_tx_pin(TX_PIN);
    vw_set_ptt_inverted(true);
    vw_set_rx_pin(RX_PIN);
    vw_setup(2000);     // bps
    vw_rx_start();      // Inicializa o receptor
}

code/tight Ping_Blocks (void) -> void do
    {{
        u8 id = ID;
        vw_send(&id, 1);
        Serial.print("tx'ing...\n");
        vw_wait_tx();
        Serial.print("tx'ed...\n");
    }}
end

code/await Pong (void) -> void do
    await async do
        var u8 id  = _;
        var u8 len = _;
        _Serial.print("rx'ing...\n");
        loop do
            if {vw_get_message(@(&&id), @(&&len))} as bool then
                _ceu_dbg_assert(len == 1);
                _Serial.print(id);
                _Serial.print("id\n");
                if id == ID then
                    break;
                end
            end
        end
        _Serial.print("rx'ed...\n");
    end
end

_Serial.begin(9600);

var int seq;
loop seq in [1 -> _[ do
    var bool next_is_him = do
        par do
            //var Side side = await Mic();
            await Mic();                            // my hit
            _Serial.println("my hit");
            call Tx();
            escape true;
        with
            await Rx();                             // his hit
            _Serial.println("his hit");
            escape false;
        end
    end;

    spawn () do
        #include "playing.ceu"
    end

    var int touch;
    loop touch in [1 -> _[ do
        par/or do
            var u32 old = _micros();

            if next_is_him then
                _Serial.println("await him");
                await Rx();                         // his hit
                _Serial.println("his hit");
            else
                //var Side side = await Mic();
                _Serial.println("await myself");
                await Mic();                        // my hit
                _Serial.println("my hit");
                call Tx();
            end

            next_is_him = (not next_is_him);

            var u32 us = _micros() - old;
            var int km_h = dist*36000/(us as int);
            var int m_s  = dist/(us as int)*1000;
            _Serial.print("seq ");
            _Serial.print(seq);
            _Serial.print(" | ");
            _Serial.print("touch ");
            _Serial.print(touch);
            _Serial.print(" | ");
            _Serial.print(m_s);
            _Serial.print("ms | ");
            _Serial.print(dist);
            _Serial.println("dist");
        with
            await 5s;                               // 5 seconds w/ response
            break;
        end
    end

    _Serial.println("QUEDA");
end
