#include "arduino/arduino.ceu"

#define ID 0x30
#define TO (0x30 + (0x31-ID))

#define TX_PIN      7
#define RX_PIN      8

native/plain _u8;
native/nohold _vw_get_message;
native _vw_wait_tx, _vw_tx_active;
native/nohold _vw_send;             // TODO-1

native/pre do
    ##include <VirtualWire.h>
end

{
    vw_set_tx_pin(TX_PIN);
    //vw_set_ptt_inverted(true);
    vw_setup(2000);     // bps
    //vw_set_ptt_inverted(true);
    vw_set_rx_pin(RX_PIN);
    vw_setup(2000);     // bps
    vw_rx_start();      // Inicializa o receptor
}

//code/tight Tx (void) -> void do
code/await Tx (var u16 touch) -> void do
    //loop do
    vector[2] _u8 msg = _;
    msg[0] = touch as u8; // TODO u16
var u32 v1 = _micros();
        // 192ms is safe to terminate before the other side hits and transmits concurrently
        var int i;
        loop i in [0 -> 4[ do           // 4*48 = 192ms
var u32 v2 = _micros();
_ceu_dbg_assert(v2-v1 <= 255000);
var u8 dt = ((v2 - v1) / 1000) as int;
            msg[1] = dt;
            _vw_send(&&msg[0], 2);        // TODO: u16
            //vw_wait_tx();           // takes 48ms + ?
// TODO: mandar um segundo byte com o tempo em ms passado desde o p1o envio
            do finalize with
                _vw_wait_tx();          // TODO-1
            end
            await async do
                loop do
                    if not (_vw_tx_active() as bool) then    // takes 48ms
                        break;
                    end
                end
            end
// usar ack p/ calcular ping
        end
var u32 v2 = _micros() - v1;
_Serial.print("send ");
_Serial.print(touch);
_Serial.print(" | ");
_Serial.print(v2);
_Serial.println("us");
        //await 200ms;                // TODO: try 50ms?
    //end
end

code/await Rx (var u16 touch) -> int do
    vector[2] _u8 msg = _;
    loop do
        await async (msg) do
            var u8 tot = 2;
            loop do
                var u8 len = 2;
                if _vw_get_message(&&msg[2-tot], &&len) as bool then
_Serial.print("LEN ");
_Serial.println(len);
_Serial.print("tot ");
_Serial.println(tot);
                    tot = tot - len;
                    if tot == 0 then
                        break;
                    end
                end
            end
        end
_Serial.print("recv ");
_Serial.print(msg[0]);
_Serial.print(".");
_Serial.print(msg[1]);
        if touch == msg[0] then    // TODO: u16
_Serial.println(" ok");
            escape msg[1];
        else
_Serial.println(" no");
        end
    end
end

#if 0
code/await Rx (var u16 touch) -> int do
    await async (touch) do
        loop do
            native/plain _u8;
            native/nohold _vw_get_message;
            vector[2] _u8 msg = _;
            var u8 len = _;
            var int tot = 2;
            loop do
                if _vw_get_message(&&msg[2-tot],&&len) as bool then
                    tot = tot - (len as int);
                    _ceu_dbg_assert(tot == 2);
                    _ceu_dbg_assert(tot >= 0);
                    if tot == 0 then
                        break;
                    end
                end
            end
_Serial.print("recv ");
_Serial.print(msg[0]);
_Serial.print(".");
_Serial.print(msg[1]);
            if touch == msg[0] then    // TODO: u16
_Serial.println(" ok");
                break;
            else
_Serial.println(" no");
            end
        end
    end
end
#endif
