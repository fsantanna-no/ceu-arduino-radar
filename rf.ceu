#include "arduino/arduino.ceu"

#define ID 0x30
#define TO (0x30 + (0x31-ID))

#define TX_PIN      7
#define RX_PIN      8

native/pre do
    ##include <VirtualWire.h>
end

{
    vw_set_tx_pin(TX_PIN);
    //vw_set_ptt_inverted(true);
    vw_setup(2000);     // bps
    //vw_set_ptt_inverted(true);
    vw_set_rx_pin(RX_PIN);
    vw_setup(2000);     // bps
    vw_rx_start();      // Inicializa o receptor
}

//code/tight Tx (void) -> void do
code/await Tx (var u16 touch) -> void do
    //loop do
var u32 v1 = _micros();
        await async (touch) do
            var int i;
            loop i in [0 -> 5[ do           // 5*48 = 240ms
                {{
                    u8 touch = @touch;      // TODO: remove
                    vw_send(&touch, 1);     // TODO: u16
                    vw_wait_tx();           // takes 48ms
                }}
            end
        end
var u32 v2 = _micros() - v1;
_Serial.print("send ");
_Serial.print(touch);
_Serial.print(" | ");
_Serial.print(v2);
_Serial.println("us");
        //await 200ms;                // TODO: try 50ms?
    //end
end

code/await Rx (var u16 touch) -> void do
    await async (touch) do
        {
            u8 X;
            u8 LEN;
        }
        loop do
            var u8 to  = _;
            var u8 len = _;
            //if {vw_get_message(@(&&to), @(&&len))} as bool then
                //_ceu_dbg_assert({LEN} == 1);
                //_Serial.println(to);
            if {vw_get_message(&X, &LEN)} as bool then
                _ceu_dbg_assert({LEN} == 1);
_Serial.print("recv ");
_Serial.println({X});
                if touch == {X} then    // TODO: u16
                    break;
                end
            end
        end
    end
end
