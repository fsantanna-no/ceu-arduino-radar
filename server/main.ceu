#define OUTPUT_OLED

#if 0
TX      Bluetooth
RX      Bluetooth
D2      Sound
D3      Botao OK
D4      Botao PLUS
D5      Botao MINUS
D6      TODO
D7      Radio
D8      Radio
D9
D10
D11     Radio
D12     Radio
D13     Radio
A0
A1
A2
A3
A4      OLED
A5      OLED
#endif

#include "c.ceu"
#include "arduino/arduino.ceu"

#if 0
    - desconsiderar o último par (últimos 2 toques) para
        - contar somente ataques com continuidade (foi e voltou)
            - evitar porrada na última bola
        - incentivar salvamentos, se não der certo (cair em seguida), não conta pra média
#endif

#define MS_TO_GAME              10000           // 10 seconds
//#define MS_TO_GAME              30000           // 30 seconds
//#define MS_TO_GAME              {300000LL}      // 5 minutes
#define MS_TO_FALL              3000            // 3 seconds
#define DISTANCE_IN_CM          800             // 8 meters
#define ATTACK_THRESHOLD_IN_MS  500             // 0.5s
#define RULE_20_PCT

input  u8                IN_TOUCH;
input  int               IN_CONFIG;

event  none              out_game_ini;
event  u16               out_game_end;          // #seqs
event  u16               out_sequence_ini;      // seq
event  (u16,u32)         out_sequence_end;      // seq, dt
event  u16               out_sequence_fall;     // seq
event  (u16,u8,u32,bool) out_touch;             // touch, id, dt, is_att

input byte SERIAL_RECEIVE_BYTE;

#ifdef OUTPUT_OLED
native _oled;
native/pre do
    ##include "SSD1306Ascii.h"
    ##include "SSD1306AsciiAvrI2c.h"
    SSD1306AsciiAvrI2c oled;
end
{
    oled.begin(&Adafruit128x64, 0x3C);
    oled.setFont(font8x8);
}
#else
#error TODO
#endif

_Serial.println("ok");
_delay(1000);

#define PIN_TONE 2
output bool PIN_02;

#define BUT_OK    PIN_03
#define BUT_PLUS  PIN_04
#define BUT_MINUS PIN_05
input on/off BUT_OK;
input on/off BUT_PLUS;
input on/off BUT_MINUS;

#include "tone.ceu"
#include "input.ceu"

#if 0
spawn do
    event none e;
    par do
        loop do
            await e;
            await async do
                emit IN_TOUCH(1);
            end
            await e;
            await async do
                emit IN_TOUCH(2);
            end
        end
    with
        every 500ms do
            emit e;
        end
    end
end
#endif

do
    #include "config.ceu"
end

do
#if 1
    spawn do
        #include "debug.ceu"
    end
#endif
#if 0
    spawn do
        #include "abraf.ceu"
    end
#endif
#if 0
    spawn do
        #include "chico.ceu"
    end
#endif

    loop do
        // await double click
        loop do
            var int but = await IN_CONFIG until but==0;
            watching 500ms do
                but = await IN_CONFIG until but==0;
                break;
            end
        end

        var u32 ms_game = 0;                            // total game time
        emit out_game_ini;
        emit Tone_Start;

        var u16 seq;
        loop seq in [1 -> _[ do
            var[2*] u32 ms;
            var u32 ms_0 = _;

            var u8 idA = await IN_TOUCH;                // start counting after 0th touch
            //emit out_touch(0, idA, -1);

            emit out_sequence_ini(seq);
            do finalize with
                var u32 dt = {(@($ms >= 2)) ? @(ms[$ms-1] - ms_0) : 0};
                emit out_sequence_end(seq,dt);          // ms difference between last and 0th touch
            end

            emit Tone_Ball;

            do
                var u32 now = _millis();
                ms = ms .. [now];
                ms_0 = now;
            end

#ifdef RULE_20_PCT
            var u32? old;
#endif
            var u16 touch;
            loop touch in [1 -> _[ do                   // TRACK TOUCHES
                par/or do                               // track fall
                    await (MS_TO_FALL)ms;
                    break;
                with                                    // alternate touches between idA/idB
                    var u8 idB = await IN_TOUCH until (idB != idA);
                    do
                        var u32 now = _millis();
                        if $ms == $$ms then
                            $ms = $ms - 1;
                        end
                        ms = ms .. [now];
                    end
                    var u32 dt = ms[$ms-1]-ms[$ms-2];
                    var bool is_att = do
#ifdef RULE_20_PCT
                        var bool ret = (touch > 1) and (dt <= (old! as real)*0.8);
                        old = dt;
                        escape ret;
#else
                        escape (dt <= ATTACK_THRESHOLD_IN_MS);
#endif
                    end;

                    emit out_touch(touch, idA, dt, is_att);
                    if is_att then
                        emit Tone_Attack;
                    else
                        emit Tone_Touch;
                    end
                    idA = idB;

                    ms_game = ms_game + dt;
                    if ms_game >= MS_TO_GAME then       // CHECK TOTAL GAME TIME
                        break/seq;
                    end
                end
            end

            emit out_sequence_fall(seq);
            emit Tone_Fall;
        end

        emit out_game_end(seq);
        emit Tone_End;
    end
end
