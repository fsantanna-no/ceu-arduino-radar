//#define DEBUG
#include "c.ceu"

#if 0
    - desconsiderar o último par (últimos 2 toques) para
        - contar somente ataques com continuidade (foi e voltou)
            - evitar porrada na última bola
        - incentivar salvamentos, se não der certo (cair em seguida), não conta pra média
#endif

#define MS_TO_GAME              10000           // 10 seconds
//#define MS_TO_GAME              30000           // 30 seconds
//#define MS_TO_GAME              {300000LL}      // 5 minutes
#define MS_TO_FALL              3000            // 3 seconds
#define DISTANCE_IN_CM          800             // 8 meters
#define ATTACK_THRESHOLD_IN_MS  500             // 0.5s
#define RULE_20

input  (u8,bool)         IN_TOUCH;

output &u32              GET_TIME;

output (u8,u8)           OUT_GAME_INI;          // idA, idB
output u16               OUT_GAME_END;          // #seqs
output u16               OUT_SEQUENCE_INI;      // seq
output (u16,u32)         OUT_SEQUENCE_END;      // seq, dt
output u16               OUT_SEQUENCE_FALL;     // seq
output (u16,u8,u32,bool) OUT_TOUCH;             // touch, id, dt

input byte SERIAL;

output bool PIN_03;

#ifdef DEBUG
#include "tests.ceu"
#else
#include "tone.ceu"
#include "input.ceu"
#endif

par do
    #include "abraf.ceu"
    await FOREVER;
with
    //#include "chico.ceu"
    await FOREVER;
with
    //#include "media.ceu"
    await FOREVER;
with
    #include "debug.ceu"
    await FOREVER;
with
    loop do
        var u8 idA;
        var u8 idB;
        (idA,_) = await IN_TOUCH;
        (idB,_) = await IN_TOUCH until (idA != idB);
        _ceu_dbg_assert(idA+idB == 1);

        emit OUT_GAME_INI(idA,idB);
        spawn Tone(true,10);
        await 500ms;                                    // skip storm

        var u32 ms_game = 0;                            // total game time

        pool[2] Tone tones;

        var u16 seq;
        loop seq in [1 -> _[ do
            var[2*] u32 ms;
            var u32 ms_0 = _;

            emit OUT_SEQUENCE_INI(seq);
            do finalize with
                var u32 dt = do
                    if $ms >= 2 then
                        escape ms[$ms-1] - ms_0;        // ms difference between last and 0th touch
                    else
                        escape 0;
                    end
                end;
                emit OUT_SEQUENCE_END(seq,dt);
            end

            var u8 id1;
            (id1,_) = await IN_TOUCH;                // start counting after 0th touch
            //emit OUT_TOUCH(0, id1, -1);
            spawn Tone(true,1) in tones;

            do
                var u32 now = _;
                emit GET_TIME(&now);
                ms = ms .. [now];
                ms_0 = now;
            end

#ifdef RULE_20
            var u32? old;
#endif
            var u16 touch;
            loop touch in [1 -> _[ do                   // TRACK TOUCHES
                par/or do                               // track fall
                    await (MS_TO_FALL)ms;
                    break;
                with                                    // alternate touches between idA/idB
                    var u8 id2;
                    (id2,_) = await IN_TOUCH until (id2 != id1);
                    do
                        var u32 now = _;
                        emit GET_TIME(&now);
                        if $ms == $$ms then
                            $ms = $ms - 1;
                        end
                        ms = ms .. [now];
                    end
                    var u32 dt = ms[$ms-1]-ms[$ms-2];
                    var bool is_att = do
#ifdef RULE_20
                        var bool ret = (touch > 1) and (dt <= (old! as float)*0.8);
                        old = dt;
                        escape ret;
#else
                        escape (dt <= ATTACK_THRESHOLD_IN_MS);
#endif
                    end;

                    emit OUT_TOUCH(touch, id1, dt, is_att);
                    if is_att then
                        spawn Tone(true,2) in tones;
                    else
                        spawn Tone(true,1) in tones;
                    end
                    id1 = id2;

                    ms_game = ms_game + dt;
                    if ms_game >= MS_TO_GAME then       // CHECK TOTAL GAME TIME
                        break/seq;
                    end
                end
            end

            emit OUT_SEQUENCE_FALL(seq);
            spawn Tone(false,5) in tones;
        end

        emit OUT_GAME_END(seq);
        spawn Tone(false,10) in tones;
        await 5s;
    end
end
