native/pos do
    u16 M_ATAS[2];
    u16 M_PAR;
    u32 M_TOTAL;

    tceu_callback_ret CB_MEDIA_F (int cmd, tceu_callback_arg p1, tceu_callback_arg p2, const char* file, u32 line) {
        tceu_callback_ret ret = { .is_handled=0 };
        if (cmd != CEU_CALLBACK_OUTPUT) {
            return ret;
        }
        switch (p1.num) {
            case CEU_OUTPUT_OUT_SEQUENCE_INI: {
                char str[32];
                snprintf(str, 32, ">>> %d\r\n", *((u16*)p2.ptr));
                ceu_callback_num_ptr(CEU_CALLBACK_LOG, 0, (void*)str);
                M_ATAS[0] = 0;
                M_ATAS[1] = 0;
                M_TOTAL = M_PAR = 0;
                break;
            }
            case CEU_OUTPUT_OUT_SEQUENCE_END: {
                tceu_output_OUT_SEQUENCE_END* ps = (tceu_output_OUT_SEQUENCE_END*) p2.ptr;
                char str[32];
                snprintf(str, 32, "<<< %d: %ldms\r\n", ps->_1, ps->_2);
                ceu_callback_num_ptr(CEU_CALLBACK_LOG, 0, (void*)str);
                break;
            }
            case CEU_OUTPUT_OUT_TOUCH: {
                tceu_output_OUT_TOUCH* ps = (tceu_output_OUT_TOUCH*) p2.ptr;
                u16 touch = ps->_1;
                u8  id    = ps->_2;
                u32 ms    = ps->_3;
                if (Is_Attack(touch,ms)) {
                    M_ATAS[id]++;
                }
                static u32 cur = 0;
                if (touch == 1) {
                    cur = 0;
                }
                cur += ms;
                if (touch%2 == 0) {
                    M_TOTAL += cur;
                    M_PAR   += 1;
                    {
                        char str[64];
                        snprintf(str, 64, "> %3d | %4ld/%4ld | %3d/%3d=%3d\r\n",
                            touch, cur, (u32)(M_TOTAL/M_PAR), M_ATAS[0], M_ATAS[1], M_ATAS[0]+M_ATAS[1]);
                        ceu_callback_num_ptr(CEU_CALLBACK_LOG, 0, (void*)str);
                    }
                    cur = 0;
                }
                break;
            }
        }
        return ret;
    }
    tceu_callback CB_MEDIA = { &CB_MEDIA_F, NULL };
end
{ ceu_callback_register(&CB_MEDIA); }
