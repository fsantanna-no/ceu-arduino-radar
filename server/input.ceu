native/pos do
    tceu_callback_ret CB_INPUT_F (int cmd, tceu_callback_arg p1, tceu_callback_arg p2, const char* file, u32 line) {
        tceu_callback_ret ret = { .is_handled=0 };
        if (cmd != CEU_CALLBACK_OUTPUT) {
            return ret;
        }
        switch (p1.num) {
            case CEU_OUTPUT_GET_TIME:
                *(*((u32**)p2.ptr)) = millis();
                ret.is_handled = 1;
                break;
        }
        return ret;
    }
    tceu_callback CB_INPUT = { &CB_INPUT_F, NULL };
end
{ ceu_callback_register(&CB_INPUT); }

spawn do
    par do
#if 0
        native _radio;
        native/nohold _radio_read, _radio_write;
        native/pos do
            ##include <SPI.h>
            ##include <nRF24L01.h>
            ##include <RF24.h>
            ##define radio_read(a,b) radio.read(a,b)
            ##define radio_write(a,b) { radio.stopListening(); for (int i=0; i<1; i++) { radio.write(a,b); } radio.startListening(); }
            const uint64_t pipe =  0xAABBCCDDEELL;
            RF24 radio(8,7);
        end

        {
            radio.begin();
            radio.setAutoAck(false);              // true by default
            radio.setDataRate(RF24_1MBPS);
            radio.openReadingPipe(1,pipe);
            radio.startListening();
            radio.openWritingPipe(pipe);
        }

            loop do
                if _radio.available() as bool then
                    await async do
                        var u8 v = _;
                        _radio_read(&&v, 1);
                        var u8   id      = (v & 0xF);
                        var bool is_fore = (v >> 4)  as bool;
                        {
                            Serial.print("id: ");  Serial.print(@id);
                            Serial.print(" ");
                            Serial.print("f/b: "); Serial.println(@is_fore);
                        }
                        emit IN_TOUCH(id, is_fore);
                    end
                    //await 200ms;    // skip storm
                else
                    await async do end;
                end
            end
        end
#endif
    with
        var bool ok = false;
        par do
            every ok in BUT_OK do
            end
        with
            loop do
                var on/off v = await BUT_PLUS until v;
                await async (ok) do
                    if ok then
                        emit IN_TOUCH(1);
                    else
                        emit IN_CONFIG(1);
                    end
                end
            end
        with
            loop do
                var on/off v = await BUT_MINUS until v;
                await async (ok) do
                    if ok then
                        emit IN_TOUCH(2);
                    else
                        emit IN_CONFIG(-1);
                    end
                end
            end
        with
            loop do
                await BUT_OK until ok;
                watching BUT_PLUS, BUT_MINUS do
                    await BUT_OK;
                    _ceu_dbg_assert(not ok);
                    await async do
                        emit IN_CONFIG(0);
                    end
                end
            end
        end
    end
end

#if 0
    var s16 back = 0;
    var s16 fore = 0;

    var byte c;
    every c in SERIAL_RECEIVE_BYTE do
        var s8 v = do
            if (c == {'F'}) as bool then
                fore = fore + 10;
                escape {0b10000000};
            else/if (c == {'f'}) as bool then
                fore = fore - 10;
                escape {0b01000000};
            else/if (c == {'B'}) as bool then
                back = back + 10;
                escape {0b00100000};
            else/if (c == {'b'}) as bool then
                back = back - 10;
                escape {0b00010000};
            else/if (c == {'G'}) as bool then
                escape {0b10000001};
            else/if (c == {'g'}) as bool then
                escape {0b01000001};
            else/if (c == {'C'}) as bool then
                escape {0b00100001};
            else/if (c == {'c'}) as bool then
                escape {0b00010001};
            else
                escape 0;
            end
        end;
        //_radio_write(&&v, 1);

        if v == 0 then
            break;
        end

        //_Serial.print("F: ");
        //_Serial.println(fore);
        //_Serial.print("B: ");
        //_Serial.println(back);
    end
#endif
