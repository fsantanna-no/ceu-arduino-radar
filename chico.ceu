native/pos do
    ##include <math.h>

    double ms2pts (u32 ms) {
        return 8000000.0 / (ms*16.0);
    }

    u16    _c_touches = 0;
    u32    _c_vel     = 0;
    double _c_pot     = 0;
    u32    _c_equ[2]  = { 0, 0 };
    u16    _c_tch[2]  = { 0, 0 };

    u16    c_touches  = 0;
    u32    c_vel      = 0;
    double c_pot      = 0;
    u32    c_equ[2]   = { 0, 0 };
    u16    c_tch[2]   = { 0, 0 };

    double C_EQU = 0;
    u32    C_DT  = 0;
    u32    c_dt  = 0;

    u16    c_seq = 0;

    tceu_callback_ret CB_CHICO_F (int cmd, tceu_callback_arg p1, tceu_callback_arg p2, const char* file, u32 line) {
        tceu_callback_ret ret = { .is_handled=0 };
        if (cmd != CEU_CALLBACK_OUTPUT) {
            return ret;
        }
        switch (p1.num) {
            case CEU_OUTPUT_OUT_GAME_INI: {
                tceu_output_OUT_GAME_INI* ps = (tceu_output_OUT_GAME_INI*) p2.ptr;
                ceu_callback_num_ptr(CEU_CALLBACK_LOG, 0, (void*)"===\r\n");
                break;
            }
            case CEU_OUTPUT_OUT_SEQUENCE_INI: {
                ceu_callback_num_ptr(CEU_CALLBACK_LOG, 0, (void*)"---\r\n");
                c_touches = 0;
                c_vel     = 0;
                c_pot     = 0;

                c_equ[0]  = 0;
                c_equ[1]  = 0;
                c_tch[0]  = 0;
                c_tch[1]  = 0;

                c_dt = 0;

                c_seq += 1;

                break;
            }
            case CEU_OUTPUT_OUT_SEQUENCE_END: {
                tceu_output_OUT_SEQUENCE_END* ps = (tceu_output_OUT_SEQUENCE_END*) p2.ptr;
                double equ0 = (c_tch[0]==0) ? 9999 : c_equ[0]/(double)c_tch[0];
                double equ1 = (c_tch[1]==0) ? 9999 : c_equ[1]/(double)c_tch[1];
                double equ = sqrt((equ0*equ0 + equ1*equ1) / 2);
                C_EQU += ms2pts(equ) * ps->_2;
                C_DT  += ps->_2;
//printf(">>> %f*%d -> %f [%d/%d]\n", equ, ps->_2, C_EQU/C_DT, c_dt,C_DT);
                ceu_dbg_assert(c_dt == ps->_2);
                break;
            }
            case CEU_OUTPUT_OUT_TOUCH: {
                tceu_output_OUT_TOUCH* ps = (tceu_output_OUT_TOUCH*) p2.ptr;
                u16 touch = ps->_1;
                u8  id    = ps->_2;
                u32 ms    = ps->_3;

                c_touches  += 1;
                c_vel      += ms;
                c_pot      += sqrt(ms);
                _c_touches += 1;
                _c_vel     += ms;
                _c_pot     += sqrt(ms);

                c_equ[id]  += ms;
                c_tch[id]  += 1;
                _c_equ[id] += ms;
                _c_tch[id] += 1;

                double EQU;
                c_dt += ms;

                {
                    char str[20];
                    snprintf(str, 20, "%d | ms: %4ld\r\n", id, ms);
                    ceu_callback_num_ptr(CEU_CALLBACK_LOG, 0, (void*)str);
                }

                {
                    double vel = c_vel / (double)c_touches;
                    double pot = c_pot / (double)c_touches;
                                 pot = pot*pot;

                    double equ0 = (c_tch[0]==0) ? 9999 : c_equ[0]/(double)c_tch[0];
                    double equ1 = (c_tch[1]==0) ? 9999 : c_equ[1]/(double)c_tch[1];
                    double equ = sqrt((equ0*equ0 + equ1*equ1) / 2);
//printf("%d/%d -- ", c_equ[0], c_equ[1]);
//printf("%f/%f/%f -- ", equ0, equ1, equ);

                    EQU = (C_EQU + ms2pts(equ)*c_dt) / (C_DT + c_dt);

                    char str[128];
                    snprintf(str, 128, "- vel: %4d/%4d | pot: %4d/%4d | equ: %4d/%4d\r\n",
                                       (u32)vel, (u32)ms2pts(vel), (u32)pot, (u32)ms2pts(pot),
                                       (u32)equ, (u32)ms2pts(equ));
                    ceu_callback_num_ptr(CEU_CALLBACK_LOG, 0, (void*)str);
                }

                {
                    double vel = _c_vel / (double)_c_touches;
                    double pot = _c_pot / (double)_c_touches;
                                 pot = pot*pot;

                    double equ0 = (_c_tch[0]==0) ? 9999 : _c_equ[0]/(double)_c_tch[0];
                    double equ1 = (_c_tch[1]==0) ? 9999 : _c_equ[1]/(double)_c_tch[1];
                    double equ = sqrt((equ0*equ0 + equ1*equ1) / 2);

                    u16 falls = c_seq - 1 + 1; // assume an imminent fall
                    falls = ceil(falls*MS_TO_GAME / (double)(C_DT+c_dt));

                    char str[128];
                    snprintf(str, 128, "+ vel: %4d/%4d | pot: %4d/%4d | equ: %4d/%4d/%4d | seq: %2d\r\n",
                                       (u32)vel, (u32)ms2pts(vel), (u32)pot, (u32)ms2pts(pot),
                                       (u32)equ, (u32)ms2pts(equ), (u32)EQU, falls+1);
                    ceu_callback_num_ptr(CEU_CALLBACK_LOG, 0, (void*)str);
                }
                break;
            }
        }
        return ret;
    }
    tceu_callback CB_CHICO = { &CB_CHICO_F, NULL };
end
{ ceu_callback_register(&CB_CHICO); }
