#include "c.ceu"
#include "arduino/arduino.ceu"

#define PIEZO_THRESHOLD 50
#define PIN_FORE        A0
#define PIN_BACK        A1

native _radio;
native/nohold _radio_read, _radio_write;
native/pos do
    ##include <SPI.h>
    ##include <nRF24L01.h>
    ##include <RF24.h>
    ##define radio_read(a,b)  radio.read(a,b)
    ##define radio_write(a,b) { radio.stopListening(); for (int i=0; i<1; i++) { radio.write(a,b); } radio.startListening(); }
    const uint64_t pipe =  0xAABBCCDDEELL;
    RF24 radio(8,7);
end

{ 
    radio.begin();
    radio.setAutoAck(false);              // true by default
    radio.setDataRate(RF24_1MBPS);
    radio.openReadingPipe(1,pipe);
    radio.startListening();
    radio.openWritingPipe(pipe);
}

_Serial.begin(9600);
var u8 id = 0;

code/await Piezo (var u8 pin) -> (event none ok, var u16 avg, var u16 threshold) -> NEVER do
    var[5*] u16 vals = [ 0,0,0,0,0 ];
    var u16 sum = 0;
    avg = 0;
    threshold = PIEZO_THRESHOLD;
    loop do
        var int v = _analogRead(pin);
        sum = sum + v - vals[0];
        $vals = $vals - 1;
        vals = vals .. [v];
        avg = sum/5;
        if avg > threshold then
//_Serial.println(avg);
            emit ok;
        end
        await async do end;
    end
end

var& Piezo piezoF = spawn Piezo(PIN_FORE);
var& Piezo piezoB = spawn Piezo(PIN_BACK);

code/await Hit (none) -> bool do
    par/or do
        await outer.piezoF.ok;
    with
        await outer.piezoB.ok;
    end
    escape outer.piezoF.avg >= outer.piezoB.avg;
end

par do

    loop do
        var bool is_fore = await Hit();
        _Serial.print("id: ");  _Serial.print(id);
        _Serial.print(" ");
        _Serial.print("f/b: "); _Serial.println(is_fore);
        var u8 v = (id | ((is_fore as u8)<<4));
        _radio_write(&&v, 1);
        //id = 1-id;
        await 200ms;        // skip continuous vibration
    end

with

    /* READ CONFIGURATION */

    code/await Read (none) -> byte do
        var byte ret = _;
        await async (ret) do
            loop do
                if _radio.available() as bool then
                    var byte v = _;
                    _radio_read(&&v, 1);
_Serial.print("r: ");
_Serial.println(v);
                    ret = v;
                    break;
                end
            end
        end
        //await 200ms;        // skip storm
        escape ret;
    end

    _Serial.print("Config...");

    _Serial.print("ID: ");
    _Serial.println(id);
    _Serial.print("F: ");
    _Serial.println(piezoF.threshold);
    _Serial.print("B: ");
    _Serial.println(piezoB.threshold);

    loop do
        var byte v = await Read();

        if v == 0 then
            _Serial.println("Start...");
            await FOREVER;
        end

        id = (v & {0b00001111}) as u8;
        var bool fore_inc = (v & {0b10000000}) as bool;
        var bool fore_dec = (v & {0b01000000}) as bool;
        var bool back_inc = (v & {0b00100000}) as bool;
        var bool back_dec = (v & {0b00010000}) as bool;

        piezoF.threshold = piezoF.threshold + (fore_inc as int) - (fore_dec as int);
        piezoB.threshold = piezoB.threshold + (back_inc as int) - (back_dec as int);

        _Serial.print("ID: ");
        _Serial.println(id);
        _Serial.print("F: ");
        _Serial.println(piezoF.threshold);
        _Serial.print("B: ");
        _Serial.println(piezoB.threshold);
    end
end
