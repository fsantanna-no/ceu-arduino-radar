#include "c.ceu"
#include "arduino/arduino.ceu"

#define MIC_THRESHOLD   100
#define PIEZO_THRESHOLD XXX
#define PIN_PIEZO       A1
#define PIN_MIC         A0

#define EEPROM_ID 0
#define EEPROM_S1 1

native/pre do
    ##include <EEPROM.h>
end

native _radio;
native/nohold _radio_read, _radio_write, _radio_write_read;
native/pos do
    ##include <SPI.h>
    ##include <nRF24L01.h>
    ##include <RF24.h>
    ##define radio_read(a,b)  radio.read(a,b)
    ##define radio_write(a,b) { for (int i=0; i<1; i++) { radio.write(a,b); } }
    ##define radio_write_read(a,b) { radio.stopListening(); for (int i=0; i<1; i++) { radio.write(a,b); } radio.startListening(); }
    const uint64_t pipe =  0xAABBCCDDEELL;
    RF24 radio(8,7);
end

code/await Sensor (var int pin, var int threshold_ini, var s8 threshold_acc) -> (event int ok) -> NEVER do
    loop do
        var int dif = _;
        await async (pin,threshold_ini,threshold_acc,dif) do
            var int max = 0;
            var int min = 1023;
            loop do
                var int cur = _analogRead(pin);
                if cur > max then
                    max = cur;
                end
                if cur < min then
                    min = cur;
                end
                dif = max - min;
                if dif >= (threshold_ini + threshold_acc*10) then
                    break;
                end
            end
        end
        emit ok(dif);
    end
end

{
    radio.begin();
    radio.setAutoAck(false);              // true by default
    radio.setDataRate(RF24_1MBPS);
    radio.openReadingPipe(1,pipe);
    radio.startListening();
    radio.openWritingPipe(pipe);
}

_Serial.begin(9600);

var  yes/no in_cfg = yes;
var  u8     id     = {EEPROM[EEPROM_ID]};
var& Sensor s1     = spawn Sensor(PIN_MIC, MIC_THRESHOLD, ({EEPROM[EEPROM_S1]} as s8));

par do
    loop do
        await s1.ok;
        _Serial.print("id: ");  _Serial.println(id);
        if in_cfg then
            _radio_write_read(&&id, 1);
        else
            _radio_write(&&id, 1);
        end
        id = 3-id;
        await 200ms;        // skip continuous "s1.ok" vibration
    end
with

    /* READ CONFIGURATION */

    code/await Read (none) -> byte do
        var byte ret = _;
        await async (ret) do
            loop do
                if _radio.available() as bool then
                    var byte v = _;
                    _radio_read(&&v, 1);
_Serial.print("r: ");
_Serial.println(v);
                    ret = v;
                    break;
                end
            end
        end
        //await 200ms;        // skip storm
        escape ret;
    end

    _Serial.println("Config...");

    _Serial.print("ID: ");
    _Serial.println(id);
    _Serial.print("S1: ");
    _Serial.println(s1.threshold_acc);

    loop do
        var byte v = await Read();

        if v == 0 then
            in_cfg = false;
            _radio.stopListening();
            _Serial.println("Start...");
            await FOREVER;
        end

                  id = (v & {0b00001111}) as u8;
        var bool dec = (v & {0b00010000}) as bool;
        var bool inc = (v & {0b00100000}) as bool;

        s1.threshold_acc = s1.threshold_acc + (inc as int) - (dec as int);

        _Serial.print("ID: ");
        _Serial.println(id);
        _Serial.print("S1: ");
        _Serial.println(s1.threshold_acc);

        {
            EEPROM[EEPROM_ID] = @id;
            EEPROM[EEPROM_S1] = @s1.threshold_acc;
        }
    end
end
