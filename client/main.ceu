#include "c.ceu"
#include "arduino/arduino.ceu"

#define MIC_THRESHOLD   100
#define PIEZO_THRESHOLD XXX
#define PIN_PIEZO       A1
#define PIN_MIC         A0

native _radio;
native/nohold _radio_read, _radio_write;
native/pos do
    ##include <SPI.h>
    ##include <nRF24L01.h>
    ##include <RF24.h>
    ##define radio_read(a,b)  radio.read(a,b)
    ##define radio_write(a,b) { radio.stopListening(); for (int i=0; i<1; i++) { radio.write(a,b); } radio.startListening(); }
    const uint64_t pipe =  0xAABBCCDDEELL;
    RF24 radio(8,7);
end

{ 
    radio.begin();
    radio.setAutoAck(false);              // true by default
    radio.setDataRate(RF24_1MBPS);
    radio.openReadingPipe(1,pipe);
    radio.startListening();
    radio.openWritingPipe(pipe);
}

_Serial.begin(9600);
var u8 id = 0;

code/await Sensor (var int pin, var int threshold) -> (event int ok) -> NEVER do
    loop do
        var int dif = _;
        await async (pin,threshold,dif) do
            var int max = 0;
            var int min = 1023;
            loop do
                var int cur = _analogRead(pin);
                if cur > max then
                    max = cur;
                end
                if cur < min then
                    min = cur;
                end
                dif = max - min;
                if dif >= threshold then
                    break;
                end
            end
        end
        emit ok(dif);
    end
end

var& Sensor sensorF = spawn Sensor(PIN_MIC, MIC_THRESHOLD);
var& Sensor sensorB = spawn Sensor(PIN_PIEZO, PIEZO_THRESHOLD);

#if 0
code/await Hit (none) -> bool do
    var int f = 0;
    var int b = 0;
    par/or do
        b = await outer.sensorB.ok;
        await 10us;
    with
        f = await outer.sensorF.ok;
        await 10us;
    end
    if (b as u32)*outer.sensorF.threshold > (f as u32)*outer.sensorB.threshold then
        escape false;
    else
        escape true;
    end
end
#endif

par do

    loop do
        await sensorF.ok;
        _Serial.print("id: ");  _Serial.print(id);
        _Serial.print(" ");
        _Serial.print("f/b: "); _Serial.println(true);
        var u8 v = (id | ((true as u8)<<4));
        _radio_write(&&v, 1);
        //id = 1-id;
        await 200ms;        // skip continuous vibration
    end
#if 0
with
    loop do
        await sensorB.ok;
        _Serial.print("id: ");  _Serial.print(id);
        _Serial.print(" ");
        _Serial.print("f/b: "); _Serial.println(false);
        var u8 v = (id | ((false as u8)<<4));
        _radio_write(&&v, 1);
        //id = 1-id;
        await 200ms;        // skip continuous vibration
    end

    loop do
        var bool is_fore = await Hit();
        _Serial.print("id: ");  _Serial.print(id);
        _Serial.print(" ");
        _Serial.print("f/b: "); _Serial.println(is_fore);
        var u8 v = (id | ((is_fore as u8)<<4));
        _radio_write(&&v, 1);
        //id = 1-id;
        await 200ms;        // skip continuous vibration
    end
#endif

with

    /* READ CONFIGURATION */

    code/await Read (none) -> byte do
        var byte ret = _;
        await async (ret) do
            loop do
                if _radio.available() as bool then
                    var byte v = _;
                    _radio_read(&&v, 1);
_Serial.print("r: ");
_Serial.println(v);
                    ret = v;
                    break;
                end
            end
        end
        //await 200ms;        // skip storm
        escape ret;
    end

    _Serial.print("Config...");

    _Serial.print("ID: ");
    _Serial.println(id);
    _Serial.print("F: ");
    _Serial.println(sensorF.threshold);
    _Serial.print("B: ");
    _Serial.println(sensorB.threshold);

    loop do
        var byte v = await Read();

        if v == 0 then
            _Serial.println("Start...");
            await FOREVER;
        end

        id = (v & {0b00001111}) as u8;
        var bool fore_inc = (v & {0b10000000}) as bool;
        var bool fore_dec = (v & {0b01000000}) as bool;
        var bool back_inc = (v & {0b00100000}) as bool;
        var bool back_dec = (v & {0b00010000}) as bool;

        sensorF.threshold = sensorF.threshold + (fore_inc as int)*10 - (fore_dec as int)*10;
        sensorB.threshold = sensorB.threshold + (back_inc as int)*10 - (back_dec as int)*10;

        _Serial.print("ID: ");
        _Serial.println(id);
        _Serial.print("F: ");
        _Serial.println(sensorF.threshold);
        _Serial.print("B: ");
        _Serial.println(sensorB.threshold);
    end
end
