#if 0
D7      Radio
D8      Radio
D9
D10
D11     Radio
D12     Radio
D13     Radio
A0
A1      Microfone
#endif

#include "c.ceu"
#include "arduino/arduino.ceu"

#define AMP
#ifdef AMP
#define PIN_MIC         A1
#define MIC_THRESHOLD   1023
#else
#define PIN_MIC         A0
#define MIC_THRESHOLD   10
#endif

#define EEPROM_ID  0
#define EEPROM_MIC 1

native/pre do
    ##include <EEPROM.h>
end

native _radio;
native/nohold _radio_read, _radio_write, _radio_write_read;
native/pos do
    ##include <SPI.h>
    ##include <nRF24L01.h>
    ##include <RF24.h>
    ##define radio_read(a,b)  radio.read(a,b)
    ##define radio_write(a,b) { for (int i=0; i<1; i++) { radio.write(a,b); } }
    ##define radio_write_read(a,b) { radio.stopListening(); for (int i=0; i<1; i++) { radio.write(a,b); } radio.startListening(); }
    const uint64_t pipe =  0xAABBCCDDEELL;
    RF24 radio(8,7);
end

#if 0
code/await Sensor (var int pin, var int threshold_ini, var s8 threshold_acc) -> (event int ok) -> NEVER do
    loop do
        var int dif = _;
        await async (pin,threshold_ini,threshold_acc,dif) do
            var int max = 0;
            var int min = 1023;
            loop do
                var int cur = _analogRead(pin);
                if cur > max then
                    max = cur;
                end
                if cur < min then
                    min = cur;
                end
                dif = max - min;
                if dif >= (threshold_ini + threshold_acc*10) then
                    break;
                end
            end
        end
        emit ok(dif);
    end
end
#else
code/await Sensor (var int pin) -> none do
    loop do
        await async (pin) do
            loop do
                var int cur = _analogRead(pin);
                if cur >= 600 then
                    break;
                end
            end
        end
        watching 20ms do
            await async (pin) do
                var int i;
                loop i in [1->3] do
                    loop do
                        var int cur = _analogRead(pin);
                        if cur <= 300 then
                            break;
                        end
                    end
                    loop do
                        var int cur = _analogRead(pin);
                        if cur >= 600 then
                            break;
                        end
                    end
                end
            end
            escape;
        end
    end
end
#endif

{
    radio.begin();
    //radio.disableCRC();
    radio.setPayloadSize(1);
    radio.setAutoAck(false);              // true by default
    radio.setDataRate(RF24_2MBPS);
    radio.openReadingPipe(1,pipe);
    radio.startListening();
    radio.openWritingPipe(pipe);

    //analogReference(INTERNAL);

    Serial.begin(9600);
}

//#define TOGGLE

var  yes/no in_cfg = yes;
#if 0
var& Sensor mic    = spawn Sensor(PIN_MIC, MIC_THRESHOLD, ({EEPROM[EEPROM_MIC]} as s8));
#endif
#ifdef TOGGLE
var  u8     id     = 1;
#else
var  u8     id     = {EEPROM[EEPROM_ID]};
#endif

par do
#if 0
    var int i;
    loop i in [0->2[ do
        await 1s;
        _Serial.print("id: ");  _Serial.println(id);
        _radio_write_read(&&id, 1);
        id = 3-id;
    end
#endif
    loop do
#if 0
        await mic.ok;
#else
        //await 1s;
        await Sensor(PIN_MIC);
#endif
        _Serial.print("id: ");  _Serial.println(id);
        if in_cfg then
            _radio_write_read(&&id, 1);
        else
            _radio_write(&&id, 1);
#ifdef TOGGLE
            id = 3-id;
#endif
        end
        await 200ms;        // skip continuous "mic.ok" vibration
    end
with

    /* READ CONFIGURATION */

    code/await Read (none) -> byte do
        var byte ret = _;
        await async (ret) do
            loop do
                if _radio.available() as bool then
                    var byte v = _;
                    _radio_read(&&v, 1);
_Serial.print("r: ");
_Serial.println(v);
                    ret = v;
                    break;
                end
            end
        end
        //await 200ms;        // skip storm
        escape ret;
    end

    _Serial.println("Config...");

    _Serial.print("ID: ");
    _Serial.println(id);
#if 0
    _Serial.print("MIC: ");
    _Serial.println(mic.threshold_acc);
#endif

    loop do
        var byte v = await Read();

        if v == 0 then
            in_cfg = false;
            _radio.stopListening();
            _Serial.println("Start...");
            await FOREVER;
        end

                  id = (v & {0b00001111}) as u8;
        var bool dec = (v & {0b00010000}) as bool;
        var bool inc = (v & {0b00100000}) as bool;

#if 0
        mic.threshold_acc = mic.threshold_acc + (inc as int) - (dec as int);
#endif

        _Serial.print("ID: ");
        _Serial.println(id);
#if 0
        _Serial.print("MIC: ");
        _Serial.println(mic.threshold_acc);

        {
            EEPROM[EEPROM_ID]  = @id;
            EEPROM[EEPROM_MIC] = @mic.threshold_acc;
        }
#endif
    end
end
